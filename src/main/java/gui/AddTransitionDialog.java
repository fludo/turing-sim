/*
 *   Copyright (©) 2009 | 16 January 2009 | EPFL (Ecole Polytechnique fédérale de Lausanne)
 *
 *   TuringSim is free software ; you can redistribute it and/or modify it under the terms of the
 *   GNU General Public License as published by the Free Software Foundation ; either version 3 of
 *   the License, or (at your option) any later version.
 *
 *   TuringSim is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY ;
 *   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License along with TuringSim ;
 *   if not, write to the Free Software Foundation,
 *
 *   Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 *
 *
 *   Author : Ludovic Favre <ludovic.favre@epfl.ch>
 *
 *   Project supervisor : Mahdi Cheraghchi <mahdi.cheraghchi@epfl.ch>
 *
 *   Web site : http://icwww.epfl.ch/~lufavre
 *
 */

/*
 * AddTransitionDialog.java
 *
 * Created on 5 mai 2009, 08:19:26
 */

package gui;

import core.Alphabet;
import core.MultiTapeTransition;
import core.State;
import core.Transition;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/**
 *
 * @author Ludovic Favre
 */
public class AddTransitionDialog extends javax.swing.JDialog {
    private String[] states_;
    private Alphabet inputAlphabet_, tapeAlphabet_;
    private SingleTapePanel panel_;
    private MultiTapePanel panel2_;
    private boolean isMulti_ = false;
    /** Creates new form AddTransitionDialog */
    public AddTransitionDialog(java.awt.Frame parent, boolean modal, SingleTapePanel panel, LinkedList<State> states,Alphabet inputAlphabet, Alphabet tapeAlphabet) {
        super(parent, modal);
        buildStringArray(states);
        this.inputAlphabet_ = inputAlphabet;
        this.tapeAlphabet_ = tapeAlphabet;
        this.panel_ = panel;
        initComponents();
        core.Direction[] dirs = new core.Direction[2];
        dirs[0] = core.Direction.RIGHT;
        dirs[1] = core.Direction.LEFT;
        directionCombo.setModel(new javax.swing.DefaultComboBoxModel(dirs));

    }

        public AddTransitionDialog(java.awt.Frame parent, boolean modal, MultiTapePanel panel, LinkedList<State> states,Alphabet inputAlphabet, Alphabet tapeAlphabet) {
        super(parent, modal);
        buildStringArray(states);
        this.inputAlphabet_ = inputAlphabet;
        this.tapeAlphabet_ = tapeAlphabet;
        this.panel2_ = panel;
        this.isMulti_ = true;
        initComponents();

        directionCombo.setModel(new javax.swing.DefaultComboBoxModel(core.MultiTapeDirection.values()));
    }

    private void buildStringArray(LinkedList<State> states){
        this.states_ = new String[states.size()];
        int i =0;
        for (State state : states) {
            states_[i] = state.label();
            i++;
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        windowLabel = new javax.swing.JLabel();
        fromStateLabel = new javax.swing.JLabel();
        toStateLabel = new javax.swing.JLabel();
        inLabel = new javax.swing.JLabel();
        outLabel = new javax.swing.JLabel();
        dirLabel = new javax.swing.JLabel();
        fromCombo = new javax.swing.JComboBox();
        toCombo = new javax.swing.JComboBox();
        inputCombo = new javax.swing.JComboBox();
        ouputCombo = new javax.swing.JComboBox();
        directionCombo = new javax.swing.JComboBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gui.TuringApp.class).getContext().getResourceMap(AddTransitionDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        windowLabel.setText(resourceMap.getString("windowLabel.text")); // NOI18N
        windowLabel.setName("windowLabel"); // NOI18N

        fromStateLabel.setText(resourceMap.getString("fromStateLabel.text")); // NOI18N
        fromStateLabel.setName("fromStateLabel"); // NOI18N

        toStateLabel.setText(resourceMap.getString("toStateLabel.text")); // NOI18N
        toStateLabel.setName("toStateLabel"); // NOI18N

        inLabel.setText(resourceMap.getString("inLabel.text")); // NOI18N
        inLabel.setName("inLabel"); // NOI18N

        outLabel.setText(resourceMap.getString("outLabel.text")); // NOI18N
        outLabel.setName("outLabel"); // NOI18N

        dirLabel.setText(resourceMap.getString("dirLabel.text")); // NOI18N
        dirLabel.setName("dirLabel"); // NOI18N

        fromCombo.setModel(new javax.swing.DefaultComboBoxModel(this.states_));
        fromCombo.setName("fromCombo"); // NOI18N

        toCombo.setModel(new javax.swing.DefaultComboBoxModel(this.states_));
        toCombo.setName("toCombo"); // NOI18N

        inputCombo.setModel(new javax.swing.DefaultComboBoxModel(this.inputAlphabet_.toStringArray()));
        inputCombo.setName("inputCombo"); // NOI18N

        ouputCombo.setModel(new javax.swing.DefaultComboBoxModel(this.tapeAlphabet_.toStringArray()));
        ouputCombo.setName("ouputCombo"); // NOI18N

        directionCombo.setModel(new javax.swing.DefaultComboBoxModel(core.Direction.values()));
        directionCombo.setName("directionCombo"); // NOI18N

        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(windowLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromStateLabel)
                            .addComponent(toStateLabel)
                            .addComponent(dirLabel)
                            .addComponent(outLabel)
                            .addComponent(inLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ouputCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(directionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap(200, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(windowLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromStateLabel)
                    .addComponent(fromCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toStateLabel)
                    .addComponent(toCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(outLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ouputCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dirLabel)
                    .addComponent(directionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
        this.dispose();
    }//GEN-LAST:event_cancelButtonMouseClicked

    private void okButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseClicked
        try{
        State fromState = new State((String)this.fromCombo.getModel().getSelectedItem());
        State toState = new State((String)this.toCombo.getModel().getSelectedItem());

        char inputSymb = ((String)this.inputCombo.getModel().getSelectedItem()).charAt(0);
        char ouputSymb = ((String)this.ouputCombo.getModel().getSelectedItem()).charAt(0);

        

        

        if(!isMulti_){
            core.Direction dir = (core.Direction)this.directionCombo.getModel().getSelectedItem();
            Transition t = new Transition(fromState,toState,ouputSymb,inputSymb,dir);
            this.panel_.addNewTransition(t);
        }else{
            //multitape
            core.MultiTapeDirection dir = (core.MultiTapeDirection)this.directionCombo.getModel().getSelectedItem();
            MultiTapeTransition t = new MultiTapeTransition(fromState,toState,ouputSymb,inputSymb,dir);
            this.panel2_.addNewTransition(t);
        }
        }
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "Cannot add such a transition. Please complete fields");
        }

        this.dispose();
    }//GEN-LAST:event_okButtonMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel dirLabel;
    private javax.swing.JComboBox directionCombo;
    private javax.swing.JComboBox fromCombo;
    private javax.swing.JLabel fromStateLabel;
    private javax.swing.JLabel inLabel;
    private javax.swing.JComboBox inputCombo;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox ouputCombo;
    private javax.swing.JLabel outLabel;
    private javax.swing.JComboBox toCombo;
    private javax.swing.JLabel toStateLabel;
    private javax.swing.JLabel windowLabel;
    // End of variables declaration//GEN-END:variables

}
