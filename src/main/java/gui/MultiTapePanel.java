/*
 *   Copyright (©) 2009 | 16 January 2009 | EPFL (Ecole Polytechnique fédérale de Lausanne)
 *
 *   TuringSim is free software ; you can redistribute it and/or modify it under the terms of the
 *   GNU General Public License as published by the Free Software Foundation ; either version 3 of
 *   the License, or (at your option) any later version.
 *
 *   TuringSim is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY ;
 *   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License along with TuringSim ;
 *   if not, write to the Free Software Foundation,
 *
 *   Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 *
 *
 *   Author : Ludovic Favre <ludovic.favre@epfl.ch>
 *
 *   Project supervisor : Mahdi Cheraghchi <mahdi.cheraghchi@epfl.ch>
 *
 *   Web site : http://icwww.epfl.ch/~lufavre
 *
 */
package gui;

import core.Alphabet;
import core.MultiTapeRunner;
import core.MultiTapeTransition;
import core.MultiTapeTuringMachine;
import core.Tape;
import core.exception.InvalidStateException;
import core.exception.InvalidTransitionException;
import core.exception.InvalidTuringMachineSettings;
import core.exception.StateNotFoundException;
import core.exception.TapeBoundReachedException;
import core.io.XMLWriter;
import java.io.File;
import java.util.HashSet;
import java.util.Set;
import org.jdesktop.application.Action;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Ludovic Favre
 */
public class MultiTapePanel extends javax.swing.JPanel implements TuringPanelInterface {

    /** Creates new form MultiTapePanel */
    /*public MultiTapePanel() {
    initComponents();
    }*/
    public MultiTapePanel(MultiTapeTuringMachine tm, javax.swing.JTabbedPane tabReference, int inTabIndex, String filepath) {
        this.tm_ = tm;
        //System.out.println("Got my reference : "+inTabIndex+" and size is "+tabReference.getTabCount());
        this.tabReference_ = tabReference;
        this.intTabIndex_ = inTabIndex;
        this.filepath_ = filepath;
        try {
            this.runner_ = new MultiTapeRunner(this.tm_);
        } catch (Exception e) {
            this.runner_ = null;
        //JOptionPane.showMessageDialog(this, "Turing Runner Engine initialization failed : " + e.getMessage());
        }
        initComponents();
        this.refreshAll();
        this.consoleAppend("Single Tape Turing Machine loaded : " + this.tm_.name());
        this.consoleAppend("Description : " + this.tm_.description());
        this.consoleAppend("-------------------------------------------------------");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statesListScrollPane = new javax.swing.JScrollPane();
        statesList = new javax.swing.JList();
        addStateButton = new javax.swing.JButton();
        deleteStateButton = new javax.swing.JButton();
        statesLabel = new javax.swing.JLabel();
        transitionsLabel = new javax.swing.JLabel();
        tapeLabel = new javax.swing.JLabel();
        addTransitionButton = new javax.swing.JButton();
        removeTransitionButton = new javax.swing.JButton();
        bottomSeparator = new javax.swing.JSeparator();
        tapeEditButton = new javax.swing.JButton();
        consoleLabel = new javax.swing.JLabel();
        consoleScrollPane = new javax.swing.JScrollPane();
        consoleTextPane = new javax.swing.JTextPane();
        closeTabButton = new javax.swing.JButton();
        rewindButton = new javax.swing.JButton();
        stepButton = new javax.swing.JButton();
        controlsLabel = new javax.swing.JLabel();
        transitionTapeChoiceComboBox = new javax.swing.JComboBox();
        transitionsScrollPane = new javax.swing.JScrollPane();
        transitionsTable = new javax.swing.JTable();
        tapesScrollPane = new javax.swing.JScrollPane();
        tapesTable = new javax.swing.JTable();
        fullRunButton = new javax.swing.JButton();
        startingStateTextField = new javax.swing.JTextField();
        startingStateLabel = new javax.swing.JLabel();
        addTapeButton = new javax.swing.JButton();
        removeTapeButton = new javax.swing.JButton();

        setName("Form"); // NOI18N

        statesListScrollPane.setName("statesListScrollPane"); // NOI18N

        statesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        statesList.setName("statesList"); // NOI18N
        statesListScrollPane.setViewportView(statesList);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(gui.TuringApp.class).getContext().getActionMap(MultiTapePanel.class, this);
        addStateButton.setAction(actionMap.get("addNewStateToList")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(gui.TuringApp.class).getContext().getResourceMap(MultiTapePanel.class);
        addStateButton.setText(resourceMap.getString("addStateButton.text")); // NOI18N
        addStateButton.setName("addStateButton"); // NOI18N
        addStateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addStateButtonMouseClicked(evt);
            }
        });

        deleteStateButton.setText(resourceMap.getString("deleteStateButton.text")); // NOI18N
        deleteStateButton.setName("deleteStateButton"); // NOI18N
        deleteStateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteStateButtonMouseClicked(evt);
            }
        });

        statesLabel.setText(resourceMap.getString("statesLabel.text")); // NOI18N
        statesLabel.setName("statesLabel"); // NOI18N

        transitionsLabel.setText(resourceMap.getString("transitionsLabel.text")); // NOI18N
        transitionsLabel.setName("transitionsLabel"); // NOI18N

        tapeLabel.setText(resourceMap.getString("tapeLabel.text")); // NOI18N
        tapeLabel.setName("tapeLabel"); // NOI18N

        addTransitionButton.setAction(actionMap.get("addTransition")); // NOI18N
        addTransitionButton.setText(resourceMap.getString("addTransitionButton.text")); // NOI18N
        addTransitionButton.setName("addTransitionButton"); // NOI18N
        addTransitionButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addTransitionButtonMouseClicked(evt);
            }
        });

        removeTransitionButton.setAction(actionMap.get("removeTransition")); // NOI18N
        removeTransitionButton.setText(resourceMap.getString("removeTransitionButton.text")); // NOI18N
        removeTransitionButton.setName("removeTransitionButton"); // NOI18N
        removeTransitionButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeTransitionButtonMouseClicked(evt);
            }
        });

        bottomSeparator.setName("bottomSeparator"); // NOI18N

        tapeEditButton.setText(resourceMap.getString("tapeEditButton.text")); // NOI18N
        tapeEditButton.setName("tapeEditButton"); // NOI18N
        tapeEditButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tapeEditButtonMouseClicked(evt);
            }
        });

        consoleLabel.setText(resourceMap.getString("consoleLabel.text")); // NOI18N
        consoleLabel.setName("consoleLabel"); // NOI18N

        consoleScrollPane.setName("consoleScrollPane"); // NOI18N

        consoleTextPane.setName("consoleTextPane"); // NOI18N
        consoleScrollPane.setViewportView(consoleTextPane);

        closeTabButton.setIcon(resourceMap.getIcon("quitButton.icon")); // NOI18N
        closeTabButton.setText(resourceMap.getString("quitButton.text")); // NOI18N
        closeTabButton.setAlignmentX(1.0F);
        closeTabButton.setAlignmentY(1.0F);
        closeTabButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        closeTabButton.setMaximumSize(new java.awt.Dimension(20, 20));
        closeTabButton.setMinimumSize(new java.awt.Dimension(20, 20));
        closeTabButton.setName("quitButton"); // NOI18N
        closeTabButton.setPreferredSize(new java.awt.Dimension(20, 20));
        closeTabButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeTabButtonMouseClicked(evt);
            }
        });

        rewindButton.setIcon(resourceMap.getIcon("rewindButton.icon")); // NOI18N
        rewindButton.setToolTipText(resourceMap.getString("rewindButton.toolTipText")); // NOI18N
        rewindButton.setActionCommand(resourceMap.getString("rewindButton.actionCommand")); // NOI18N
        rewindButton.setMaximumSize(new java.awt.Dimension(25, 25));
        rewindButton.setMinimumSize(new java.awt.Dimension(25, 25));
        rewindButton.setName("rewindButton"); // NOI18N
        rewindButton.setPreferredSize(new java.awt.Dimension(25, 25));
        rewindButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rewindButtonMouseClicked(evt);
            }
        });

        stepButton.setIcon(resourceMap.getIcon("stepButton.icon")); // NOI18N
        stepButton.setActionCommand(resourceMap.getString("stepButton.actionCommand")); // NOI18N
        stepButton.setMaximumSize(new java.awt.Dimension(25, 25));
        stepButton.setMinimumSize(new java.awt.Dimension(25, 25));
        stepButton.setName("stepButton"); // NOI18N
        stepButton.setPreferredSize(new java.awt.Dimension(25, 25));
        stepButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stepButtonMouseClicked(evt);
            }
        });

        controlsLabel.setText(resourceMap.getString("controlsLabel.text")); // NOI18N
        controlsLabel.setName("controlsLabel"); // NOI18N

        transitionTapeChoiceComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        transitionTapeChoiceComboBox.setName("transitionTapeChoiceComboBox"); // NOI18N
        transitionTapeChoiceComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                transitionTapeChoiceComboBoxMouseClicked(evt);
            }
        });
        transitionTapeChoiceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transitionTapeChoiceComboBoxActionPerformed(evt);
            }
        });

        transitionsScrollPane.setName("transitionsScrollPane"); // NOI18N

        this.model_ = new DefaultTableModel();
        this.model_.addColumn("State");
        this.model_.addColumn("Input");
        this.model_.addColumn("Next State");
        this.model_.addColumn("Output");
        this.model_.addColumn("Direction");
        //this.model_.addColumn("Breakpoint");
        transitionsTable.setModel(model_);
        transitionsTable.setName("transitionsTable"); // NOI18N
        transitionsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                transitionsTableMouseClicked(evt);
            }
        });
        transitionsScrollPane.setViewportView(transitionsTable);

        tapesScrollPane.setName("tapesScrollPane"); // NOI18N

        tapesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tape", "Content"
            }

        ));
        tapesTable.setName("tapesTable"); // NOI18N
        tapesScrollPane.setViewportView(tapesTable);

        fullRunButton.setIcon(resourceMap.getIcon("fullRunButton.icon")); // NOI18N
        fullRunButton.setMaximumSize(new java.awt.Dimension(25, 25));
        fullRunButton.setMinimumSize(new java.awt.Dimension(25, 25));
        fullRunButton.setName("fullRunButton"); // NOI18N
        fullRunButton.setPreferredSize(new java.awt.Dimension(25, 25));
        fullRunButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fullRunButtonMouseClicked(evt);
            }
        });

        startingStateTextField.setEditable(false);
        startingStateTextField.setEnabled(false);
        startingStateTextField.setName("startingStateTextField"); // NOI18N

        startingStateLabel.setText(resourceMap.getString("startingStateLabel.text")); // NOI18N
        startingStateLabel.setName("startingStateLabel"); // NOI18N

        addTapeButton.setAction(actionMap.get("addATape")); // NOI18N
        addTapeButton.setText(resourceMap.getString("addTapeButton.text")); // NOI18N
        addTapeButton.setName("addTapeButton"); // NOI18N

        removeTapeButton.setAction(actionMap.get("removeTape")); // NOI18N
        removeTapeButton.setText(resourceMap.getString("removeTapeButton.text")); // NOI18N
        removeTapeButton.setName("removeTapeButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bottomSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 873, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(consoleLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(consoleScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(statesListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(startingStateLabel)
                                            .addGap(10, 10, 10)
                                            .addComponent(startingStateTextField))
                                        .addComponent(addStateButton)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(tapeEditButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(removeTapeButton)
                                                .addComponent(addTapeButton))))
                                    .addComponent(deleteStateButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(controlsLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(rewindButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(stepButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fullRunButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(transitionsLabel)
                                                .addGap(4, 4, 4)
                                                .addComponent(transitionTapeChoiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(removeTransitionButton)
                                            .addComponent(addTransitionButton))
                                        .addGap(403, 403, 403))
                                    .addComponent(transitionsScrollPane)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tapeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tapesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)))
                        .addGap(24, 24, 24))
                    .addComponent(closeTabButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statesLabel)
                        .addContainerGap(852, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tapeLabel)
                            .addComponent(tapesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fullRunButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rewindButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stepButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tapeEditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addTapeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(controlsLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(transitionsLabel)
                            .addComponent(transitionTapeChoiceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeTapeButton)))
                    .addComponent(closeTabButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(statesListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startingStateLabel)
                            .addComponent(startingStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(transitionsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addStateButton)
                    .addComponent(addTransitionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteStateButton)
                    .addComponent(removeTransitionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottomSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(consoleLabel)
                        .addGap(94, 94, 94))
                    .addComponent(consoleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addStateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addStateButtonMouseClicked
        addNewStateToList();
}//GEN-LAST:event_addStateButtonMouseClicked

    private void deleteStateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteStateButtonMouseClicked
        JFrame mainFrame = TuringApp.getApplication().getMainFrame();
        DeleteStateDialog addDialog = new DeleteStateDialog(mainFrame, this, true, this.tm_.states());
        addDialog.setLocationRelativeTo(mainFrame);
        TuringApp.getApplication().show(addDialog);
}//GEN-LAST:event_deleteStateButtonMouseClicked

    private void addTransitionButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addTransitionButtonMouseClicked
       String tapeSelected = (String) this.transitionTapeChoiceComboBox.getModel().getSelectedItem();

        if (tapeSelected != null) {
            this.activeTape_ = tapeSelected;
            JFrame mainFrame = TuringApp.getApplication().getMainFrame();
        AddTransitionDialog addDialog = new AddTransitionDialog(mainFrame, true, this, this.tm_.states(), this.tm_.alphabet(), this.tm_.tape(tapeSelected).alphabet());
        addDialog.setLocationRelativeTo(mainFrame);
        TuringApp.getApplication().show(addDialog);
            /*java.util.LinkedList<core.MultiTapeTransition> transitions = new java.util.LinkedList<core.MultiTapeTransition>(
                    this.tm_.transitions(tapeSelected));
            java.util.Collections.sort(transitions);
            TableModel model = this.transitionsTable.getModel();
            DefaultTableModel m1 = (DefaultTableModel) model;

            while (m1.getRowCount() != 0) {
                m1.removeRow(0);
            }

            for (core.MultiTapeTransition transition : transitions) {
                m1.addRow(new Object[]{transition.currentState(), transition.currentChar(),
                            transition.nextState(), transition.nextChar(), transition.direction()});
            }*/
        }
}//GEN-LAST:event_addTransitionButtonMouseClicked

    public void addNewTransition(MultiTapeTransition t){
        try{
        this.tm_.addTransitionToTape(this.activeTape_, t);
        }
        catch(InvalidTransitionException e){
            JOptionPane.showMessageDialog(this, "Transition is invalid. Is as not been added to the Turing Machine :"+e.getMessage());
        }
        this.refreshTransitions();
    }
    private void removeTransitionButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeTransitionButtonMouseClicked
        int row = this.transitionsTable.getSelectedRow();
        if (row != -1) {
            DefaultTableModel m = (DefaultTableModel) this.transitionsTable.getModel();
            /*Remainder : content of a row is an Object[]
             *
             * m1.addRow(new Object[]{transition.currentState(), transition.currentChar(),
            transition.nextState(),transition.nextChar(), transition.direction()});
             */
            core.State fromState = (core.State) m.getValueAt(row, 0);
            core.State toState = (core.State) m.getValueAt(row, 2);



            char inputSymb = ((Character) m.getValueAt(row, 1)).charValue();
            char ouputSymb = ((Character) m.getValueAt(row, 3)).charValue();

            core.MultiTapeDirection dir = (core.MultiTapeDirection) m.getValueAt(row, 4);

            MultiTapeTransition t = new MultiTapeTransition(fromState, toState, inputSymb, ouputSymb, dir);
            String tapeName = (String) this.transitionTapeChoiceComboBox.getModel().getSelectedItem();
            this.tm_.removeTransition(tapeName, t);

            m.removeRow(row);

            refreshAll();
        }

}//GEN-LAST:event_removeTransitionButtonMouseClicked

    private void tapeEditButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tapeEditButtonMouseClicked
        JFrame mainFrame = TuringApp.getApplication().getMainFrame();
        EditMultiTapeTapeDialog editDialog = new EditMultiTapeTapeDialog(mainFrame, needSaving_, this,
                new HashSet(this.tm_.tapes().keySet()));
        editDialog.setLocationRelativeTo(mainFrame);
        TuringApp.getApplication().show(editDialog);

}//GEN-LAST:event_tapeEditButtonMouseClicked

    private void closeTabButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeTabButtonMouseClicked
        tabReference_.remove(this.intTabIndex_);
    }//GEN-LAST:event_closeTabButtonMouseClicked

    private void fullRunButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullRunButtonMouseClicked
        if (this.runner_ == null) {
            try {
                this.runner_ = new MultiTapeRunner(this.tm_);
            } catch (Exception e) {
                this.runner_ = null;
                JOptionPane.showMessageDialog(this, "Turing Runner Engine initialization failed : " + e.getMessage());
            }
        }
        boolean done = false;
        while (!done) {


            try {
                done = !this.runner_.doStep();
                if (!done) {
                    this.consoleAppend("New current state : " + this.tm_.currentState().label());
                }
                this.refreshAll();
                if (done) {
                    if (this.tm_.accepting()) {
                        this.consoleAppend("No transition found, Turing machine state is " + this.tm_.currentState().label() + "(accepting)");
                    }
                    if (this.tm_.rejecting()) {
                        this.consoleAppend("No transition found, Turing machine state is " + this.tm_.currentState().label() + "(rejecting)");
                    }
                }

            } catch (InvalidTransitionException e1) {
                JOptionPane.showMessageDialog(this, "Invalid transition exception");
            } catch (StateNotFoundException e2) {
                JOptionPane.showMessageDialog(this, "State not found exception");
            } catch (TapeBoundReachedException e3) {
                JOptionPane.showMessageDialog(this, "Tape bound reached !");
            }
        }
    }//GEN-LAST:event_fullRunButtonMouseClicked

    private void transitionsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transitionsTableMouseClicked
        /* if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
        System.out.println("Button 1");
        } else {
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3 || evt.getButton() == java.awt.event.MouseEvent.BUTTON2) {
        System.out.println("Button 2");
        }
        }*/
}//GEN-LAST:event_transitionsTableMouseClicked

    private void transitionTapeChoiceComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transitionTapeChoiceComboBoxMouseClicked
        this.refreshTransitions();
    //System.out.println("Clicked");
    }//GEN-LAST:event_transitionTapeChoiceComboBoxMouseClicked

    private void transitionTapeChoiceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transitionTapeChoiceComboBoxActionPerformed
        //this.refreshTransitions();
        //System.out.println("Action performed ! "+evt.getActionCommand());
        if (evt.getActionCommand().equals("comboBoxChanged")) {
            this.refreshTransitions();
        }
    }//GEN-LAST:event_transitionTapeChoiceComboBoxActionPerformed

    private void stepButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stepButtonMouseClicked
        if (this.runner_ == null) {
            try {
                this.runner_ = new MultiTapeRunner(this.tm_);
            } catch (Exception e) {
                this.runner_ = null;
                JOptionPane.showMessageDialog(this, "Turing Runner Engine initialization failed : " + e.getMessage());
            }
        }
        try {
            boolean done = this.runner_.doStep();
            if (done) {
                this.consoleAppend("New current state : " + this.tm_.currentState().label());
            }
            this.refreshAll();
                        if (!done) {
                if (this.tm_.accepting()) {
                    this.consoleAppend("No transition found, Turing machine state is " + this.tm_.currentState().label() + "(accepting)");
                }
                if (this.tm_.rejecting()) {
                    this.consoleAppend("No transition found, Turing machine state is " + this.tm_.currentState().label() + "(rejecting)");
                }
            }
        } catch (InvalidTransitionException e1) {
            JOptionPane.showMessageDialog(this, "Invalid transition exception");
        } catch (StateNotFoundException e2) {
            JOptionPane.showMessageDialog(this, "State not found exception");
        } catch (TapeBoundReachedException e3) {
            JOptionPane.showMessageDialog(this, "Tape bound reached !");
        }
    }//GEN-LAST:event_stepButtonMouseClicked

    private void rewindButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rewindButtonMouseClicked
        this.tm_.init();
        this.refreshAll();
        this.consoleAppend("Turing Machine has been resetted to default");
        this.consoleAppend("-------------------------------------------------------");
    }//GEN-LAST:event_rewindButtonMouseClicked

    @Action
    public void addNewStateToList() {
        JFrame mainFrame = TuringApp.getApplication().getMainFrame();
        AddStateDialog addDialog = new AddStateDialog(this, null, mainFrame, true);//AddStateDialog(this,mainFrame, true);
        addDialog.setLocationRelativeTo(mainFrame);
        TuringApp.getApplication().show(addDialog);
    }

    @Override
    public void newAlphabetIs(String newAlphabet) {
        this.tm_.alphabetIs(new Alphabet(newAlphabet));
    }

    public void newTapeAlphabetIs(String tapeIdent, Alphabet newAlphabet) {
        this.tm_.tape(tapeIdent).alphabetIs(newAlphabet);
    }

    public void newTapeContentIs(String tapeIdent, String content) {
        try{
        this.tm_.tapeContentIs(tapeIdent, content);}
        catch(IllegalArgumentException e){
            JOptionPane.showMessageDialog(this, "Failed to change tape content : " + e.getMessage());
        }
        refreshAll();
    }

    public void editInputAlphabet() {
        JFrame mainFrame = TuringApp.getApplication().getMainFrame();
        EditAlphabetDialog editDialog = new EditAlphabetDialog(mainFrame, true, this, this.tm_.alphabet(), false);
        editDialog.setLocationRelativeTo(mainFrame);
        TuringApp.getApplication().show(editDialog);
    }

    public void editTmInfo() {
        JFrame mainFrame = TuringApp.getApplication().getMainFrame();
        EditTuringMachineInformationDialog editDialog = new EditTuringMachineInformationDialog(mainFrame, true, this, this.tm_.name(), this.tm_.description());
        editDialog.setLocationRelativeTo(mainFrame);
        TuringApp.getApplication().show(editDialog);
    }

    public void tmInfoAre(String name, String description) {
        this.tm_.nameIs(name);
        this.tm_.descriptionIs(description);
        this.needSaving_ = true;
    }

    /**
     * Edit the tape alphabet, should call a popup with tape choice option.
     */
    public void editTapeAlphabet() {
        JFrame mainFrame = TuringApp.getApplication().getMainFrame();
        EditMultiTapeTapeAlphabetDialog editDialog = new EditMultiTapeTapeAlphabetDialog(mainFrame, true, this,
                new HashSet<String>(this.tm_.tapes().keySet()));
        editDialog.setLocationRelativeTo(mainFrame);
        TuringApp.getApplication().show(editDialog);
    }

    public Alphabet tapeAlphabet(String tapeIndice) {
        Tape t = this.tm_.tape(tapeIndice);
        if (t != null) {
            Alphabet al = t.alphabet();
            return al;
        }
        return null;
    }

    public String tapeContent(String tapeIndice) {
        Tape t = this.tm_.tape(tapeIndice);
        if (t != null) {
            String content = t.toString();
            return content;
        }
        return null;
    }

    @Override
    public void addStateToList(core.State state, boolean starting, boolean accepting, boolean rejecting) {
        if ((accepting == rejecting) && accepting == true) {
            JOptionPane.showMessageDialog(this, "Couldn't insert the state as its options are not valid !");
        } else {
            try {
                this.tm_.addState(state);
            } catch (InvalidStateException e) {
                JOptionPane.showMessageDialog(this, "Failed to add state " + state.label() + " because of the following reason : \n" +
                        e.getMessage());
            }

            try {
                if (starting) {
                    this.tm_.startStateIs(state);
                }
                if (accepting) {
                    this.tm_.addAcceptingState(state.label());
                }
                if (rejecting) {
                    this.tm_.addRejectingState(state.label());
                }
            } catch (Exception e) {
                this.tm_.removeState(state);
                JOptionPane.showMessageDialog(this, "Some settings of the state failed to be applied. \n" +
                        "The state has not been created");
                System.err.println(e.getMessage());
            }
        }

        this.refreshStates();

    }

    private void refreshAll() {
        this.refreshTapesList();
        this.refreshStates();
        this.refreshTapes();
        this.refreshTransitions();
    }

    private void refreshStates() {
        this.statesList.removeAll();
        //System.out.println("Adding states ... !!!");
        Object[] obj = new Object[this.tm_.states().size()];
        for (int i = 0; i < obj.length; i++) {
            if (this.tm_.containsAcceptingState(this.tm_.states().get(i).toString())) {
                obj[i] = this.tm_.states().get(i).toString() + "<A>";
            } else if (this.tm_.containsRejectingState(this.tm_.states().get(i).toString())) {
                obj[i] = this.tm_.states().get(i).toString() + "<R>";
            } else {
                obj[i] = this.tm_.states().get(i).toString();
            }
        }

        final Object[] objs = obj;

        statesList.setModel(new javax.swing.AbstractListModel() {

            @Override
            public int getSize() {
                return objs.length;
            }

            @Override
            public Object getElementAt(int i) {
                return objs[i];
            }
        });

        this.startingStateTextField.setText(this.tm_.startState().toString());
    }

    private void refreshTapes() {
        TableModel model = this.tapesTable.getModel();
        DefaultTableModel m1 = (DefaultTableModel) model;

        while (m1.getRowCount() != 0) {
            m1.removeRow(0);
        }

        for (String tapeStr : this.tm_.tapes().keySet()) {
            m1.addRow(new Object[]{tapeStr, this.tm_.tape(tapeStr).positionString()});
        }
    }

    private void refreshTapesList() {
        HashSet<String> labels = new HashSet<String>(this.tm_.tapes().keySet());
        this.transitionTapeChoiceComboBox.removeAllItems();
        for (String string : labels) {
            this.transitionTapeChoiceComboBox.addItem(string);
        }
    }

    private void refreshTransitions() {
        String tapeSelected = (String) this.transitionTapeChoiceComboBox.getModel().getSelectedItem();

        if (tapeSelected != null) {
            java.util.LinkedList<core.MultiTapeTransition> transitions = new java.util.LinkedList<core.MultiTapeTransition>(
                    this.tm_.transitions(tapeSelected));
            java.util.Collections.sort(transitions);
            TableModel model = this.transitionsTable.getModel();
            DefaultTableModel m1 = (DefaultTableModel) model;

            while (m1.getRowCount() != 0) {
                m1.removeRow(0);
            }

            for (core.MultiTapeTransition transition : transitions) {
                m1.addRow(new Object[]{transition.currentState(), transition.currentChar(),
                            transition.nextState(), transition.nextChar(), transition.direction()});
            }
        }

    }

    @Override
    public void deleteState(core.State state) {
        this.tm_.removeState(state);
        this.refreshStates();
    }

    @Override
    public void save() {
        if (this.filepath_ == null) {
            this.saveTo();
        } else {
            try {
                new XMLWriter().save(this.tm_, filepath_);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Failed to save the Turing Machine : \n" + e.getMessage());
            }
        }
    }

    @Override
    public void saveTo() {
        JFrame mainFrame = TuringApp.getApplication().getMainFrame();
        OpenFileBox openBox = new OpenFileBox(mainFrame, true);
        openBox.setLocationRelativeTo(mainFrame);


        TuringApp.getApplication().show(openBox);

        File selectedFile = openBox.jFileChooser().getSelectedFile();
        if (selectedFile == null) {
        } else {
            try {
                new XMLWriter().save(this.tm_, selectedFile.getAbsolutePath());

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Failed to save the Turing Machine : \n" + e.getMessage());
            }

        }
    }

    @Override
    public void consoleAppend(String text) {
        this.consoleTextPane.setText(this.consoleTextPane.getText() + "\n" + text);
    }

    @Action
    public void addATape() {
        Set<String> keys = this.tm_.tapes().keySet();
        int i = 0;
        boolean found = false;
        while (!found) {
            String s = "" + i;
            if (keys.contains(s)) {
                i++;
            } else {
                found = true;
            }
        }
        String id = "" + i;
        try {
            this.tm_.addTransitionsWithTape(id, new HashSet<MultiTapeTransition>(), new Tape(false));
            this.refreshAll();
        } catch (InvalidTuringMachineSettings e) {
            JOptionPane.showMessageDialog(this, "Failed to add a tape : \n" + e.getMessage());
        }
    }

    @Action
    public void removeTape() {
        JFrame mainFrame = TuringApp.getApplication().getMainFrame();
        RemoveTapeDialog editDialog = new RemoveTapeDialog(mainFrame, needSaving_, this,
                new HashSet(this.tm_.tapes().keySet()));
        editDialog.setLocationRelativeTo(mainFrame);
        TuringApp.getApplication().show(editDialog);
    }

    public void removeTapeById(String id) {
        this.tm_.removeTape(id);
        this.refreshTapesList();
        this.refreshTapes();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStateButton;
    private javax.swing.JButton addTapeButton;
    private javax.swing.JButton addTransitionButton;
    private javax.swing.JSeparator bottomSeparator;
    private javax.swing.JButton closeTabButton;
    private javax.swing.JLabel consoleLabel;
    private javax.swing.JScrollPane consoleScrollPane;
    private javax.swing.JTextPane consoleTextPane;
    private javax.swing.JLabel controlsLabel;
    private javax.swing.JButton deleteStateButton;
    private javax.swing.JButton fullRunButton;
    private javax.swing.JButton removeTapeButton;
    private javax.swing.JButton removeTransitionButton;
    private javax.swing.JButton rewindButton;
    private javax.swing.JLabel startingStateLabel;
    private javax.swing.JTextField startingStateTextField;
    private javax.swing.JLabel statesLabel;
    private javax.swing.JList statesList;
    private javax.swing.JScrollPane statesListScrollPane;
    private javax.swing.JButton stepButton;
    private javax.swing.JButton tapeEditButton;
    private javax.swing.JLabel tapeLabel;
    private javax.swing.JScrollPane tapesScrollPane;
    private javax.swing.JTable tapesTable;
    private javax.swing.JComboBox transitionTapeChoiceComboBox;
    private javax.swing.JLabel transitionsLabel;
    private javax.swing.JScrollPane transitionsScrollPane;
    private javax.swing.JTable transitionsTable;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel model_ = new DefaultTableModel();
    private MultiTapeTuringMachine tm_;
    private boolean needSaving_ = false;
    private javax.swing.JTabbedPane tabReference_ = null;
    private int intTabIndex_ = -1;
    private String filepath_ = null;
    private MultiTapeRunner runner_;
    private String activeTape_ = null;
}
